{"version":3,"sources":["webpack:///./app/src/App/helpers.js","webpack:///./app/src/App/components/Loading.js","webpack:///./app/src/sessionStorage.js","webpack:///./app/src/Quiz/components/QuizLessons.js","webpack:///./app/src/Quiz/components/RadioChoice.js","webpack:///./app/src/Quiz/containers/RadioChoiceContainer.js","webpack:///./app/src/Quiz/actions.js","webpack:///./app/src/Quiz/components/ChoiceList.js","webpack:///./app/src/Quiz/components/Question.js","webpack:///./app/src/Quiz/components/QuestionList.js","webpack:///./app/src/Quiz/components/QuizBtn.js","webpack:///./app/src/Quiz/components/QuizForm.js","webpack:///./app/src/Quiz/containers/QuizFormContainer.js","webpack:///./app/src/Quiz/components/Quiz.js","webpack:///./app/src/Quiz/containers/QuizContainer.js","webpack:///./app/src/Quiz/reducers.js","webpack:///./app/src/Quiz/actionTypes.js","webpack:///./app/src/Quiz/components/stylesheets/Quiz.scss","webpack:///./app/src/Quiz/components/stylesheets/Quiz.scss?0516"],"names":["sortBy","key","order","arguments","length","undefined","a","b","hasOwnProperty","varA","toUpperCase","varB","comparison","uniqBy","accumulator","current","id","push","flattenArray","array","property","concat","apply","map","obj","__webpack_exports__","props","error","react__WEBPACK_IMPORTED_MODULE_0___default","createElement","timedOut","pastDelay","__webpack_require__","d","clearState","loadState","serializedState","sessionStorage","getItem","JSON","parse","err","saveState","state","stringify","setItem","clear","QuizLessons_QuizLessons","prop_types_default","lessons","quizLessons","language","quizLessonsList","lesson","slug","title","react_default","react_router_lib","to","className","propTypes","components_QuizLessons","RadioChoice_RadioChoice","func","number","object","string","choiceId","questionId","checked","handleChange","choice","htmlFor","name","type","onChange","text","components_RadioChoice","RadioChoiceContainer_RadioChoiceContainer","RadioChoiceContainer","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","getAnswer","bind","Component","answers","_this2","filter","answer","userAnswers","_extends","containers_RadioChoiceContainer","lib","_ref","quiz","dispatch","e","target","document","getElementById","actionTypes","payload","Error","status","setUserAnswer","ChoiceList_ChoiceList","choices","choiceList","components_ChoiceList","Question_Question","bool","dangerouslySetInnerHTML","__html","rawHTML","components_Question","QuestionList_QuestionList","QuestionList","QuestionList_classCallCheck","QuestionList_possibleConstructorReturn","renderQuestion","nextProps","question","shortid_default","generate","questionsList","questions","components_QuestionList","QuizBtn_QuizBtn","value","components_QuizBtn","Modal","react_loadable_lib_default","loader","then","modules","webpack","loading","Loading","Notification","module","__esModule","assign","default","QuizForm_QuizForm","QuizForm","QuizForm_classCallCheck","QuizForm_possibleConstructorReturn","maxAttempts","isNotificationActive","numIncorrect","attemptsClassname","incorrectClassname","isModalOpen","toggleNotification","updateStatusNotification","isAllAnswered","showCorrectIndicator","generateLink","generateExitLink","goToCertificateScreen","isCorrectFilter","getCorrectAnswers","scoreQuiz","handleSubmit","toggleModal","closeModal","handleNotification","setState","_props","keys","cls","el","classList","remove","add","url","params","esc","encodeURIComponent","query","k","join","href","getAttribute","course","courseName","token","tokenName","tokenValue","exitPage","window","location","correct","helpers","_props2","correctAnswers","results","forEach","preventDefault","_props3","numAttempts","incrementNumAttempts","_props4","resetQuiz","_props5","quizAgree","quizCert","quizBtn","quizWrong","quizAttemptsRemain","quizAttempts","quizAnswer","quizDismiss","noMoreAttempts","_state","onSubmit","isActive","message","action","onDismiss","dismissAfter","onClick","show","onClose","components_QuizForm","QuizFormContainer_QuizFormContainer","containers_QuizFormContainer","app","_app$data","data","Quiz_Quiz","scroll","quizQuestions","components_Quiz","QuizContainer_QuizContainer","initialState","reducers_quizReducer","arr","index","userAnswersFromState","newAnswer","slicedUserAnswers","item","indexOf","slice","pureSplice","updateUserAnswers","SET_USER_ANSWER","INCREMENT_NUM_ATTEMPTS","RESET_QUIZ","exports","i","content","locals"],"mappings":"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","file":"app~lesson~quiz.bundle.js","sourcesContent":["export const sortBy = (key, order='asc') => {\n  return function(a, b) {\n    // if property doesn't exist on either object\n    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {\n      return 0; \n    }\n\n    const varA = (typeof a[key] === 'string') ? \n      a[key].toUpperCase() : a[key];\n    const varB = (typeof b[key] === 'string') ? \n      b[key].toUpperCase() : b[key];\n\n    let comparison = 0;\n    if (varA > varB) {\n      comparison = 1;\n    } else if (varA < varB) {\n      comparison = -1;\n    }\n    return (order == 'desc') ? (comparison * -1) : comparison;\n  };\n}\n\n\nexport const uniqBy = (accumulator, current) => {\n  const length = accumulator.length;\n  if (length === 0 || accumulator[length - 1].id !== current.id) {\n      accumulator.push(current);\n  }\n  return accumulator;\n};\n\n\nexport const flattenArray = (array, property) => {\n  return [].concat.apply([], array.map(obj => obj[property]));\n}\n\n\n// export const generateArrFromObjectKeys = obj => {\n//   const array = [];\n//   Object.values(obj).forEach(value => {\n//     if (value) {\n//       choices.push(value);\n//     }\n//   });\n//   return array;\n// };\n","import React from 'react';\n\n\nconst Loading = props => {\n  if (props.error) {\n    return <div>Error!</div>;\n  } else if (props.timedOut) {\n    return <div>Taking a long time...</div>;\n  } else if (props.pastDelay) {\n    return <div>Loading...</div>;\n  } else {\n    return null;\n  }\n};\n\n\nexport default Loading;","/*\n * Check if the key 'state' exists in sessionStorage\n *\n * @todo Something more unique that 'state'\n *\n * @return {Object} - If 'state' exists, parse it and return the object\n * @return {undefined} - If 'state' does not exist, return undefined\n *\n * @since 1.0.0\n */\n\nexport const loadState = () => {\n\ttry {\n\t\tconst serializedState = sessionStorage.getItem('courses_state_1483731319800');  // change name of state to something less common\n\n    if (serializedState === null) {\n      return undefined;\n    }\n\n\t  return JSON.parse(serializedState);\n\t} catch (err) {\n\t  return undefined;\n\t}\n}\n\n\n\n\n/*\n * Save state to sessionStorage\n *\n * @todo Something more unique that 'state'\n *\n * @since 1.0.0\n */\n\nexport const saveState = state => {\n\ttry {\n\t\tconst serializedState = JSON.stringify(state);\n\t\tsessionStorage.setItem('courses_state_1483731319800', serializedState)\n\t} catch (err) {}\n}\n\n\n\n/*\n * Clear sessionStorage state\n *\n * @todo Clear the state so that users can take multiple quizzes\n *\n * @since 2.0.1\n */\n\nexport const clearState = state => {\n\ttry {\n\t\tsessionStorage.clear()\n\t} catch (err) {}\n}\n","import React from 'react';\nimport { Link } from 'react-router';\nimport PropTypes from 'prop-types';\n\nconst { array } = PropTypes;\n\n\n/*\n * The QuizLesson component.\n *\n * @since 2.0.0\n */\n\nconst QuizLessons = props => {\n  const { lessons, language } = props;\n  const { quizLessons } = language;\n\n  const renderLesson = lesson => {\n    const { slug, title } = lesson;\n    return (\n      <li key={ slug }>\n        <Link to={ `lesson/${ slug }` }>\n          { title }\n        </Link>\n      </li>\n    );\n  }\n\n  const quizLessonsList = lessons.map(renderLesson);\n\n  return (\n    <div>\n      <h3 className='quiz-lessons'>{ quizLessons }:</h3>\n      <ul className='quiz-lessons-list'>\n        { quizLessonsList }\n      </ul>\n    </div>\n  );\n};\n\n\nQuizLessons.propTypes = {\n  lessons: array\n};\n\n\nexport default QuizLessons;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst { array, func, number, object, string } = PropTypes;\n\n\n/*\n * The RadioChoice component\n *\n * @param {Object} props - The React props object\n *\n * @since 2.0.0\n */\n\nconst RadioChoice = (props) => {\n  const { choiceId,\n          questionId,\n          checked,\n          handleChange,\n          choice } = props;\n\n  return (\n    <li>\n      <label htmlFor={ choiceId }>\n        <input id={ choiceId } name={ questionId } type={ 'radio' } checked={ checked } onChange={ handleChange }/>\n        { choice.text }\n      </label>\n    </li>\n  );\n};\n\n\nRadioChoice.propTypes = {\n  checked: string,\n  choice: object,\n  handleChange: func,\n  choiceId: string,\n  questionId: string,\n  userAnswers: array\n};\n\n\nexport default RadioChoice;\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { setUserAnswer } from 'Quiz/actions';\nimport RadioChoice from 'Quiz/components/RadioChoice';\n\n\nconst { array, func, object, string } = PropTypes;\n\n\n/*\n * The container component responsible for interacting with the Redux store.\n *\n * @since 2.0.0\n */\n\nclass RadioChoiceContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getAnswer = this.getAnswer.bind(this);\n  }\n\n\n  /*\n   * Filter the answer from state that matches props.choiceId\n   *\n   * @param {Array} answers - The answers from state\n   *\n   * @return {Object} answer - The filtered answer from state\n   *\n   * @since 2.0.0\n   */\n  getAnswer(answers) {\n    return answers.filter(answer => answer.choiceId === this.props.choiceId)[0];\n  }\n\n\n  /*\n   * Programmatically set 'checked' attribute on the radio button\n   *\n   * @since 2.0.0\n   */\n  render() {\n    const props = this.props;\n    const answer = this.getAnswer(props.userAnswers) || {};\n\n    return (\n      <RadioChoice checked={ ('choiceId' in answer) ? answer.choiceId : '' } { ...props } />\n    );\n  }\n};\n\n\nRadioChoiceContainer.propTypes = {\n  handleChange: func,\n  userAnswers: array,\n  choice: object,\n  questionId: string,\n  choiceId: string\n};\n\n\n/*\n * Standard Redux mapStateToProps function.\n *\n * @param {Object} state.quiz - The quiz object in the Redux store\n *\n * @return {Object} RadioChoicContainerStatePropsObject - Data from state mapped to the RadioChoiceContainer's props\n *\n * @since 2.0.0\n */\n\nconst mapStateToProps = ({ quiz }) => {\n  const { userAnswers } = quiz;\n\n  /*\n   * @typedef {Object} RadioChoicContainerStatePropsObject\n   * @property {Array} userAnswers - The user's answers\n   */\n  return {\n    userAnswers\n  };\n};\n\n\n\n\n/*\n * Standard Redux mapDispatchToProps function.\n *\n * @param {Function} dispatch - Redux dispatch function\n *\n * @return {Object} RadioChoiceContainerDispatchPropsObject - Object of callback functions mapped to the RadioChoiceContainer's props\n */\n\nconst mapDispatchToProps = dispatch => {\n\n  /*\n   * @typedef {Object} RadioChoiceContainerDispatchPropsObject\n   * @property {Function} handleChange - A callback that updates a user's answer in state\n   */\n  return {\n    handleChange: e => {\n      const choiceId = e.target.id;\n      const questionId = document.getElementById(choiceId).name;\n\n      dispatch(setUserAnswer(questionId, choiceId));\n    }\n  };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RadioChoiceContainer);\n\n","import * as types from './actionTypes';\n\n\n/*\n * Action format\n *\n * {\n *   type: 'STRING',\n *   payload: {},\n *   status: 'success' || 'error'\n * }\n *\n */\n\n\n\n\n/*\n * Set the user answer in the redux store\n *\n * @param {string} questionId - The question id\n * @param {Object} error - An error object\n *\n * @return {Object} payload - The action object sent to the quiz reducer\n *\n * @since 2.0.0\n */\n\nexport function setUserAnswer(questionId, choiceId, error) {\n  if (error) {\n    return {\n      type: types.SET_USER_ANSWER,\n      payload: new Error(),\n      status: 'error'\n    };\n  }\n\n  if (questionId && choiceId) {\n    return {\n      type: types.SET_USER_ANSWER,\n      payload: {\n        userAnswers: [{\n          choiceId,\n          questionId\n        }]\n      },\n      status: 'success'\n    };\n  }\n}\n\n\n\n\n/*\n * An action to increment the number of attempts the user has taken the quiz\n *\n * @return {Object} - The action object sent to the quiz reducer\n *\n * @since 2.0.0\n */\n\nexport function incrementNumAttempts() {\n  return {\n    type: types.INCREMENT_NUM_ATTEMPTS\n  }\n}\n\n\n\n\n/*\n * An action to reset the user's answers and number number of attempts at submitting the quiz\n *\n * @return {Object} - The action object sent to the quiz reducer\n *\n * @since 2.0.0\n */\n\nexport function resetQuiz() {\n  return {\n    type: types.RESET_QUIZ,\n    payload: {\n      userAnswers: [],\n      numAttempts: 0\n    }\n  }\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport RadioChoiceContainer from 'Quiz/containers/RadioChoiceContainer';\n\n\nconst { number, array, string } = PropTypes;\n\n\n/*\n * The ChoiceList component.\n *\n * @since 1.0.0\n */\n\nconst ChoiceList = props => {\n  const renderChoice = choice => {\n    const { id } = choice;\n    return (\n      <RadioChoiceContainer\n        key={ id }\n        choiceId={ id }\n        questionId={ questionId }\n        choice={ choice } />\n    );\n  };\n\n  const { choices, questionId } = props;\n  const choiceList = choices.map(renderChoice);\n\n  return (\n    <ul>{ choiceList }</ul>\n  );\n};\n\n\nChoiceList.propTypes = {\n  choices: array,\n  questionId: string,\n  className: string\n};\n\n\nexport default ChoiceList;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ChoiceList from 'Quiz/components/ChoiceList';\n\nconst { string, number, bool, array } = PropTypes;\n\n\n/*\n * The Question component.\n *\n * @since 1.0.0\n */\n\nconst Question = props => {\n  const rawHTML = props => {\n    return { __html: props.text };\n  }\n\n  const { questionId, choices } = props;\n\n  return (\n    <li className='quiz-question'>\n      <div\n        id={ questionId }\n        className='quiz-question-text'\n        dangerouslySetInnerHTML={ rawHTML(props) }></div>\n      <ChoiceList\n        className='quiz-choices'\n        questionId={ questionId }\n        choices={ choices } />\n    </li>\n  );\n};\n\n\nQuestion.propTypes = {\n  text: string,\n  choices: array,\n  questionId: string,\n  correct: bool\n};\n\n\nexport default Question;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nimport Question from 'Quiz/components/Question';\n\n\nconst { array } = PropTypes;\n\n\n/*\n * The QuestionList component.\n *\n * @todo Do we want to pass the choices, questionId all the way down from this component?\n *\n * @since 1.0.0\n */\n\nclass QuestionList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderQuestion = this.renderQuestion.bind(this);\n  }\n\n\n  shouldComponentUpdate(nextProps) {\n  \treturn false;\n  }\n\n\n  /*\n   * Note: Sending questionId as Question cannot access key.  We need the questionId to construct common group name for each choice\n   */\n  renderQuestion(question) {\n    const { choices, id, text } = question;\n\n    return (\n    \t<Question\n    \t\tkey={ shortid.generate() }\n    \t\tquestionId={ id }\n    \t\ttext={ text }\n    \t\tchoices={ choices }\n    \t/>\n    )\n  }\n\n\n\trender() {\n    const { questions } = this.props;\n    const questionsList = questions.map(this.renderQuestion);\n\n\t\treturn (\n\t\t\t<ol id=\"questionList\" className='quiz-questions'>\n        { questionsList }\n      </ol>\n\t\t);\n\t}\n};\n\n\nQuestionList.propTypes = {\n  questions: array,\n};\n\n\nexport default QuestionList;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst { string } = PropTypes;\n\n\nconst QuizBtn = props => <input type=\"submit\" value={ props.value } />;\n\n\nQuizBtn.propTypes = {\n  quizBtn: string\n};\n\n\nexport default QuizBtn;","import React from 'react';\nimport { hashHistory } from 'react-router';\nimport PropTypes from 'prop-types';\nimport Loadable from 'react-loadable';\n\nimport { flattenArray } from 'App/helpers';\nimport Loading from 'App/components/Loading';\nimport QuestionList from 'Quiz/components/QuestionList';\nimport QuizBtn from 'Quiz/components/QuizBtn';\nimport { clearState } from 'root/sessionStorage.js';\n\n\nconst { array, func, number, string, object } = PropTypes;\n\n\nconst Modal = Loadable({\n  loader: () => import(\n    /* webpackChunkName: 'Modal' */\n    'Quiz/components/Modal'\n  ),\n  loading: Loading\n});\n\nconst Notification = Loadable({\n  loader: () => import(\n    /* webpackChunkName: 'Notification' */\n    'react-notification/dist/notification'\n  ),\n  loading: Loading\n});\n\n\n/*\n * The QuizForm component\n *\n * @todo: Need to display question type based on question type\n *\n * @since 2.0.0\n */\n\nclass QuizForm extends React.Component{\n  constructor(props) {\n    super(props);\n\n    /*\n     * Maximum number of attempts\n     * Should always be one less than the number of actual max attempts because it starts at zero\n     *\n     * @since 2.1.0\n     */\n    this.maxAttempts = 5;\n\n    this.state = {\n      isNotificationActive: false,\n      numIncorrect: 0,\n      attemptsClassname: 'quiz-hide quiz-attempts',\n      incorrectClassname: 'quiz-hide quiz-incorrect',\n      isModalOpen: false\n    };\n\n    this.toggleNotification = this.toggleNotification.bind(this);\n    this.updateStatusNotification = this.updateStatusNotification.bind(this);\n    this.isAllAnswered = this.isAllAnswered.bind(this);\n    this.showCorrectIndicator = this.showCorrectIndicator.bind(this);\n    this.generateLink = this.generateLink.bind(this);\n    this.generateExitLink = this.generateExitLink.bind(this);\n    this.goToCertificateScreen = this.goToCertificateScreen.bind(this);\n    this.isCorrectFilter = this.isCorrectFilter.bind(this);\n    this.getCorrectAnswers = this.getCorrectAnswers.bind(this);\n    this.scoreQuiz = this.scoreQuiz.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.toggleModal = this.toggleModal.bind(this);\n    this.closeModal = this.closeModal.bind(this);\n    this.handleNotification = this.handleNotification.bind(this);\n  }\n\n\n  /*\n   * Set whether the notification is active in state\n   *\n   * @since 1.0.0\n   */\n  toggleNotification() {\n    this.setState({\n      isNotificationActive: !this.state.isNotificationActive\n    });\n  }\n\n\n  /*\n   * Update the status display based on user answers\n   *\n   * @since 2.1.0\n   */\n  updateStatusNotification() {\n    this.setState({\n      attemptsClassname: 'quiz-show quiz-attempts',\n      incorrectClassname: 'quiz-show quiz-incorrect'\n    });\n  }\n\n\n  /*\n   * Check if each question has answer\n   *\n   * @since 1.0.0\n   */\n  isAllAnswered() {\n    const { userAnswers, questions } = this.props;\n    return Object.keys(userAnswers).length === questions.length;\n  }\n\n\n  /*\n   * Add an 'incorrect' and 'correct' class to an element\n   *\n   * @param {String} id - The html element's id\n   * @param {String} cls - The html class to add to the element\n   *\n   * @since 1.0.0\n   */\n  showCorrectIndicator(id, cls) {\n\t  const el = document.getElementById(id);\n\n\t\tel.classList.remove('incorrect');\n\t\tel.classList.remove('correct');\n\t\tel.classList.add(cls);\n  }\n\n\n  /*\n   * Generate a link\n   *\n   * @param {String} url - A relative url from the root element's exit-page data attribute\n   * @param {Object} [params] - Option url parameters\n   *\n   * @return {String} url - An absolute url to redirect after the quiz completes successfully\n   *\n   * @since 1.0.0\n   */\n  generateLink(url, params={}) {\n    const esc = encodeURIComponent;\n    let query, a;\n\n    // Generate the query string\n    if (params) {\n      query = Object.keys(params)\n                    .map(k => `${esc(k)} = ${esc(params[k])}`)\n                    .join('&');\n    }\n\n    // Build the url and return it\n    return (url => {\n      (!a) ? a = document.createElement('a') : a;\n      a.href = `${ url }?${ query }`;\n      return a.href;\n    })(url);\n  }\n\n\n  /*\n   * Generate the link to the page a user should be redirected to after successfully completing the quiz\n   *\n   * @see https://github.com/IIP-Design/wp-simple-nonce\n   *\n   * @return {String} - The absolute url\n   *\n   * @since 1.0.0\n   */\n  generateExitLink() {\n    const url = document.getElementById('course-container')\n                        .getAttribute('data-exit-page');\n    let params = { course: this.props.courseName };\n\n    // The token object is generated by the wp-simple-nonce plugin.\n    if (typeof token !== 'undefined') {\n      if ('name' in token && 'value' in token) {\n        params.tokenName = token.name;\n        params.tokenValue = token.value;\n      }\n    }\n\n    clearState();\n\n    return this.generateLink(url, params);\n  }\n\n\n  /*\n   * Redirect the user to the exit page\n   *\n   * @since 1.0.0\n   */\n  goToCertificateScreen() {\n    const exitPage = this.generateExitLink();\n   \twindow.location = exitPage;\n  }\n\n\n  /*\n   * Filter correct question choices\n   *\n   * @param {Object} choice - A choice from a question.choices array\n   *\n   * @return {Object} choice - Return a choice that matches the condition\n   *\n   * @since 2.0.0\n   */\n  isCorrectFilter(choice) {\n    return choice.correct === true\n  }\n\n\n  /*\n   * Get an array of correct answers\n   *\n   * @param {Array} questions - An array of questions\n   *\n   * @return {Array} correctAnswers - An array of correct answers\n   *\n   * @since 2.0.0\n   */\n  getCorrectAnswers(questions) {\n    // Get a flat array of all the questions' choices\n    const choices = flattenArray(questions, 'choices');\n\n    // Return only the filtered choices\n    return choices.filter(this.isCorrectFilter);\n  }\n\n\n  /*\n   * Compare the correct answers with the user's answers\n   *\n   * @return {Array} results - An array of correct answers\n   *\n   * @since 2.0.0\n   */\n  scoreQuiz() {\n    const { questions, userAnswers } = this.props;\n    const correctAnswers = this.getCorrectAnswers(questions);\n    const results = [];\n\n    userAnswers.forEach(answer => {\n\n      // Set it to incorrect initally\n      this.showCorrectIndicator(answer.questionId, 'incorrect');\n\n      correctAnswers.forEach(correct => {\n\n        // If the answer and correct answer match, mark it correct and push it to the results array\n        if (correct.id === answer.choiceId) {\n          this.showCorrectIndicator(answer.questionId, 'correct');\n          results.push(answer);\n        }\n      });\n    });\n\n    this.setState({\n      numIncorrect: userAnswers.length - results.length\n    });\n\n    return results;\n  }\n\n\n  /*\n   * Respond to the form's onSubmit event\n   *\n   * @param {Object} event - The event object\n   */\n  handleSubmit(e) {\n    e.preventDefault();\n    const { questions,\n            numAttempts,\n            incrementNumAttempts } = this.props;\n\n\t\t// All questions not answered, show notification\n\t\tif (!this.isAllAnswered()) {\n\t\t  this.toggleNotification();\n      return;\n\t\t}\n\n\t\t// All questions answered correctly, send to cert screen\n\t\telse if (this.scoreQuiz().length === questions.length)  {\n      this.goToCertificateScreen();\n\t\t}\n\n\t\t// User got some wrong\n\t\telse {\n\n      // If max attempts reached, show the modal\n      if( numAttempts === (this.maxAttempts -1) ) {\n        this.toggleModal();\n      // Else notify user of mistakes\n\t\t\t} else {\n        this.updateStatusNotification();\n        incrementNumAttempts();\n\t\t\t}\n\t\t}\n  }\n\n  /*\n   * Set whether the modal is open in state\n   *\n   * @since 2.0.3\n   */\n  toggleModal() {\n    this.setState({ isModalOpen: !this.state.isModalOpen });\n  }\n\n  /*\n   * Reset quiz and redirect to first lesson\n   *\n   * @since 2.0.3\n   */\n  closeModal() {\n    const { resetQuiz, lessons } = this.props;\n    resetQuiz();\n    hashHistory.push(`/lesson/${lessons[0].slug}`);\n  }\n\n  /*\n   * Set whether the notification is active in state\n   *\n   * @since version TBD\n   */  \n  handleNotification() {\n    this.setState({ isNotificationActive: false });\n  }\n\n  render() {\n    const { language,\n            questions,\n            numAttempts } = this.props;\n            \n    const { quizAgree,\n            quizCert,\n            quizBtn,\n            quizWrong,\n            quizAttemptsRemain,\n            quizAttempts,\n            quizAnswer,\n            quizDismiss,\n            noMoreAttempts } = language;\n\n    const { incorrectClassname,\n            numIncorrect,\n            attemptsClassname,\n            isNotificationActive,\n            isModalOpen } = this.state;\n\n    return (\n      <div>\n        <form id='formQuiz' onSubmit={ this.handleSubmit }>\n          <div className='quiz-agrmt'>{ quizAgree } <span className='quiz-required'>*</span></div>\n          <label htmlFor='certify'>\n            <input\n              id='certify'\n              type={'checkbox'}\n              name='certify' />\n            { quizCert }\n          </label>\n          <QuestionList questions={ questions }/>\n          <QuizBtn value={ quizBtn } />\n          <span className={ incorrectClassname }>{ numIncorrect } { quizWrong } </span>\n        </form>\n        <div className={ attemptsClassname }>{ quizAttemptsRemain }: { this.maxAttempts - numAttempts } - { quizAttempts }</div>\n\n        { isNotificationActive &&\n          <Notification\n            isActive={ isNotificationActive }\n            message={ quizAnswer }\n            action={ quizDismiss }\n            onDismiss={ this.toggleNotification }\n            dismissAfter = { 3500 }\n            onClick={ this.handleNotification }/>\n        }\n\n        { isModalOpen &&\n          <Modal\n            show={ isModalOpen }\n            onClose={ this.closeModal }\n            language={ language }>\n            { noMoreAttempts }\n          </Modal>\n        }\n      </div>\n    );\n  }\n};\n\n\nQuizForm.propTypes = {\n  userAnswers: array,\n  numAttempts: number,\n  courseName: string,\n  lessons: array,\n  questions: array,\n  incrementNumAttempts: func,\n  resetQuiz: func,\n  language: object\n};\n\n\nexport default QuizForm;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { flattenArray } from 'App/helpers';\n\nimport { incrementNumAttempts, resetQuiz } from 'Quiz/actions';\nimport QuizForm from 'Quiz/components/QuizForm';\n\n\nconst { array, func, number, string } = PropTypes;\n\n\n/*\n * The container component responsible for interacting with the Redux store.\n *\n * @param {Object} props - The React props object\n *\n * @since 2.0.0\n */\n\nconst QuizFormContainer = (props) => <QuizForm { ...props }/>;\n\n\nQuizFormContainer.propTypes = {\n  userAnswers: array,\n  numAttempts: number,\n  courseName: string,\n  lessons: array,\n  questions: array,\n  incrementNumAttempts: func,\n  resetQuiz: func\n};\n\n\n\n\n/*\n * Standard Redux mapStateToProps function.\n *\n * @param {Object} state.app - State of the app as it appears in redux\n * @param {Object} state.quiz - State of the quiz as it appears in redux\n *\n * @return {Object} QuizFormContainerStatePropsObject - Data from state mapped to the QuizFormContainer's props\n */\n\nconst mapStateToProps = ({ quiz, app }) => {\n  const { userAnswers, numAttempts } = quiz;\n  const { title, lessons } = app.data;\n  const courseName = title;\n  const questions = flattenArray(lessons, 'quiz');\n\n  /*\n   * @typedef {Object} QuizFormContainerStatePropsObject\n   * @property {Array} userAnswers - The users answers\n   * @property {Number} numAttempts - The number of times the user has tried to submit the quiz\n   * @property {String} courseName - The name of the current course\n   * @property {Array} lessons - The course lessons\n   * @property {Array} questions - The course quiz questions\n   */\n\n  return {\n    userAnswers,\n    numAttempts,\n    courseName,\n    lessons,\n    questions\n  };\n};\n\n\n\n\n/*\n * Standard Redux mapDispatchToProps function.\n *\n * @param {Function} dispatch - Redux dispatch function\n *\n * @return {Object} QuizContainerDispatchPropsObject - Object of callback functions mapped to the QuizFormContainer's props\n */\n\nconst mapDispatchToProps = (dispatch) => {\n\n  /*\n   * @typedef {Object} QuizContainerDispatchPropsObject\n   * @property {Function} incrementNumAttempts - Increments numAttempts in state\n   * @property {Function} resetQuiz - Reset the quiz information in state\n   */\n\n  return {\n    incrementNumAttempts: () => {\n      dispatch(incrementNumAttempts());\n    },\n\n    resetQuiz: () => {\n      dispatch(resetQuiz());\n    }\n  };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizFormContainer);\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport QuizLessons from 'Quiz/components/QuizLessons';\nimport QuizFormContainer from 'Quiz/containers/QuizFormContainer';\n\nimport 'Quiz/components/stylesheets/Quiz.scss';\n\n\nconst { array, string, object } = PropTypes;\n\n\n/*\n * The Quiz component.\n *\n * @since 1.0.0\n */\n\nclass Quiz extends React.Component {\n  componentDidMount() {\n    // Scroll to the top of the window to prevent the page from \"loading\" in the middle\n    window.scroll(0,0);\n  }\n\n\n\trender() {\n    const { lessons,\n            language,\n            questions,\n            courseName } = this.props;\n\n    const { quizQuestions, quizAttempts } = language;\n\n\t\treturn (\n\t\t\t<div>\n        <QuizLessons lessons={ lessons } language={ language } />\n        <h3 className='quiz-instructions'>{ quizQuestions }</h3>\n        <p className='quiz-msg'>{ quizAttempts }</p> \n        <QuizFormContainer\n          questions={ questions }\n          courseName={ courseName }\n          language={ language } />\n      </div>\n\t\t);\n\t}\n};\n\n\nQuiz.propTypes = {\n  courseName: string,\n  lessons: array,\n  questions: array,\n  language: object\n};\n\n\nexport default Quiz;\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { flattenArray } from 'App/helpers';\n\nimport Quiz from 'Quiz/components/Quiz';\n\n\nconst { array, string } = PropTypes;\n\n\n/*\n * The container component responsible for interacting with the Redux store.\n *\n * @param {Object} props - The React props object\n *\n * @since 2.0.0\n */\n\nconst QuizContainer = (props) => <Quiz { ...props } />;\n\n\nQuizContainer.propTypes = {\n  courseName: string,\n  lessons: array,\n  questions: array\n};\n\n\n\n\n/*\n * Standard Redux mapStateToProps function.\n *\n * @param {Object} state.app - The app object in the Redux store\n *\n * @return {Object} QuizContainerPropsObject - Data from state mapped to the QuizContainer's props\n *\n * @since 2.0.0\n */\n\nconst mapStateToProps = ({ app, language }) => {\n  const { title, lessons } = app.data;\n  const questions = flattenArray(lessons, 'quiz');\n\n\n  /*\n   * @typedef {Object} QuizContainerPropsObject\n   * @property {String} courseName - The name of the course\n   * @property {Array} lessons - The course lessons\n   * @property {Array} questions - The course quiz questions\n   */\n\n  return {\n    courseName: title,\n    lessons,\n    questions,\n    language\n  };\n};\n\n\nexport default connect(mapStateToProps)(QuizContainer);\n\n","import * as types from './actionTypes';\n\nconst initialState = {\n  userAnswers: [],\n  numAttempts: 0\n};\n\n\n\n\n/*\n * Get the indexOf an object in an array of objects\n *\n * @param {Array} arr - The array of objects\n * @param {String} key - The key of the field you want to check\n * @param {String} id - The value you want to match against\n *\n * @return {Number} - Return the index of the object\n */\n\nconst indexOfObjectInArray = (arr, key, id) => {\n  return arr.map(item => item[key] === id).indexOf(true);\n};\n\n\n\n\n/*\n * Slice before an index, slice after index, concat the slices. All return new arrays.\n *\n * @param {Array} arr - The original array you want to remove an item from\n * @param {Number} index - The index of the item you want to remove\n *\n * @return {Array} - A new array with the desired item removed\n */\n\nconst pureSplice = (arr, index) => {\n  return arr.slice(0, index).concat(arr.slice(index + 1));\n};\n\n\n\n\n/*\n * Remove an item from an array safely and purely\n *\n * @param {Array} arr - The array\n * @param {Number|Function} index - The index of the item or a callback that returns the index\n *\n * @return {Array} - An array with the item removed or the original array if the item wasn't found\n */\n\nconst removeItem = (arr, index) => {\n  if (!index) { return arr };\n\n  // Enable index to a possible callback\n  if (typeof index === 'function') {\n    index = index();\n  }\n\n  if (index !== -1) {\n    return pureSplice(arr, index);\n  }\n\n  return arr;\n};\n\n\n\n\n/*\n * Safely update (or set) the userAnswers array in state\n *\n * @param state {Object} - Current state of the application\n * @param payload {Object} - New state of the application\n *\n * @return {Array} - A pure, updated array of userAnswers\n */\n\nconst updateUserAnswers = (state, payload) => {\n  const userAnswersFromState = state.userAnswers;\n  const newAnswer= payload.userAnswers[0];\n\n  let slicedUserAnswers;\n\n  // Check if questionId is already in state. If so, get a new array without it.\n  if (userAnswersFromState.length > 0) {\n    slicedUserAnswers = removeItem(userAnswersFromState, () => indexOfObjectInArray(userAnswersFromState, 'questionId', newAnswer.questionId));\n  }\n\n  if (slicedUserAnswers) {\n    return slicedUserAnswers.concat(newAnswer);\n  }\n\n  return userAnswersFromState.concat(newAnswer);\n};\n\n\n\n\n/*\n * The main reducer for Quiz\n *\n * @param state {Object} - The current state\n * @param action {Object} - The action triggered\n *\n * @return {Object} - The new state of the application\n */\n\nexport const quizReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case types.SET_USER_ANSWER:\n      return Object.assign({}, state, {\n        userAnswers: updateUserAnswers(state, action.payload),\n      });\n\n    case types.INCREMENT_NUM_ATTEMPTS:\n      return Object.assign({}, state, {\n        numAttempts: state.numAttempts + 1\n      });\n\n    case types.RESET_QUIZ:\n      return Object.assign({}, state, action.payload);\n  }\n\n  return state;\n};\n\n","export const SET_USER_ANSWER = 'SET_USER_ANSWER';\nexport const INCREMENT_NUM_ATTEMPTS = 'INCREMENT_NUM_ATTEMPTS';\nexport const RESET_QUIZ = 'RESET_QUIZ';\n","exports = module.exports = require(\"../../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".show{display:block}.hide{display:none}.quiz-question{margin-bottom:2em}.quiz-question ul{padding-left:.8em;margin-bottom:1.2em}.quiz-question li{list-style:none}.quiz-questions{margin-top:1.2em;padding-top:1.2em;padding-left:1em;border-top:1px solid #ddd}.quiz-question-text{margin-bottom:.5em}.quiz-question-text>p{display:inline}.quiz-instructions{padding-top:.8em;margin-bottom:0;border-top:1px solid #ddd}.quiz-msg{margin-top:5px}.quiz-hide{visibility:hidden}.quiz-show{visibility:visible}.quiz-incorrect{display:inline-block;margin-left:1em;color:#ba1e2c}.quiz-attempts{margin-top:1em;color:#000;font-weight:700;background:#ffc;padding:1em}.quiz-agrmt{font-weight:700;margin-bottom:.3em}.quiz-lessons{margin-top:1em;margin-bottom:.5em}.quiz-lessons-list{padding-left:1em}.quiz-lessons-list li{list-style:none}.quiz-button{width:10em}.quiz-required{color:red}.quiz-notifier{background-color:#2f78ab;color:#fff}#formQuiz input[type=checkbox],#formQuiz input[type=radio]{margin-right:.7em}#formQuiz input[type=submit]{width:15em;background-color:#c40837;color:#fff}#formQuiz input[type=submit]:disabled{background:#ddd;color:#aaa}.correct:after{content:\\\"\\\\2713\\\";color:#00e500}.correct:after,.incorrect:after{margin-left:.3em;font-size:1.3em}.incorrect:after{content:\\\"\\\\2718\\\";color:red}\", \"\"]);\n\n// exports\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../node_modules/css-loader/index.js??ref--5-1!../../../../../node_modules/postcss-loader/lib/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./Quiz.scss\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!../../../../../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../../../../node_modules/css-loader/index.js??ref--5-1!../../../../../node_modules/postcss-loader/lib/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./Quiz.scss\", function() {\n\t\t\tvar newContent = require(\"!!../../../../../node_modules/css-loader/index.js??ref--5-1!../../../../../node_modules/postcss-loader/lib/index.js!../../../../../node_modules/sass-loader/lib/loader.js!./Quiz.scss\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}"],"sourceRoot":""}