import React from 'react';
import { connect } from 'react-redux';
import { hashHistory } from 'react-router';
import { Notification } from 'react-notification';

import QuestionList from './QuestionList';


const { array, func, number, string } = React.PropTypes;


/*
 * The QuizForm component
 *
 * @todo: Need to display question type based on question type
 *
 * @since 2.0.0
 */

const QuizForm = React.createClass({
  propTypes: {
    userAnswers: array,
    numAttempts: number,
    courseName: string,
    lessons: array,
    questions: array,
    incrementNumAttempts: func,
    resetQuiz: func
  },


  /*
   * Set the initial state of the component
   */

  getInitialState() {
    return {
      isNotificationActive: false,
      message: 'Please answer all the questions'
    };
  },


  /*
   * Set whether the notification is active in state
   */

  toggleNotification() {
    this.setState({ isNotificationActive: !this.state.isNotificationActive });
  },


  /*
   * Check if each question has answer
   */

  isAllAnswered() {
    return Object.keys(this.props.userAnswers).length === this.props.questions.length;
  },


  /*
   * Add an 'incorrect' and 'correct' class to an element
   */

  showCorrectIndicator(id, cls) {
	  const el = document.getElementById(id);

		el.classList.remove('incorrect');
		el.classList.remove('correct');
		el.classList.add(cls);
  },


  /*
   * Generate a link
   *
   * @param url (String) - A relative url from the root element's exit-page data attribute
   *
   * @return url (String) - An absolute url to redirect after the quiz completes successfully
   */

  generateLink(url, params={}) {
    const esc = encodeURIComponent;
    let query;
    let a;

    // Generate the query string
    if (params) {
      query = Object.keys(params).map(k => esc(k) + '=' + esc(params[k])).join('&');
    }

    // Build the url and return it
    return ((url) => {
      (!a) ? a = document.createElement('a') : a;
      a.href = `${ url }?${ query }`;
      return a.href;
    })(url);
  },


  /*
   * Generate the link to the page a user should be redirected to after successfully completing the quiz
   *
   * @see https://github.com/IIP-Design/wp-simple-nonce
   *
   * @return (String) - The absolute url
   */

  generateExitLink() {
    const url = document.getElementById('course-container').getAttribute('data-exit-page');
    let params = { course: this.props.courseName };

    // The token object is generated by the wp-simple-nonce plugin.
    if (typeof token !== 'undefined') {
      if ('name' in token && 'value' in token) {
        params.tokenName = token.name;
        params.tokenValue = token.value;
      }
    }

    return this.generateLink(url, params);
  },


  /*
   * Redirect the user to the exit page
   */

  goToCertificateScreen() {
    const exitPage = this.generateExitLink();
   	window.location = exitPage;
  },


  /*
   * Check that all the userAnswers are correct
   *
   * @todo The isAllCorrect method is currently not working because it is expecting the
   * this.props.userAnswers array to be in the same order as the questions array, which
   * isn't always the case when user change their answers because of the pureSlice function
   * in the Quiz reducers file
   */

	isAllCorrect() {
		const questions = this.props.questions;
		let correct = true;
		let index = 0;

		questions.map((question) => {
			const userAnswer = this.props.userAnswers[index];
			const correctAnswer = question.correctAnswers[0];
			const id = 'q' + index;

			if (correctAnswer !== userAnswer) {
				this.showCorrectIndicator(id, 'incorrect');
				correct = false;
			} else {
				this.showCorrectIndicator(id, 'correct');
			}

			index++;
		});

  	return correct;
  },


  /*
   * Respond to the form's onSubmit event
   *
   * @param e (Object) - The event object
   */

  handleSubmit(e) {
  	e.preventDefault();

    // This should always be one less than the number of actual max attempts because it starts at zero
    const maxAttempts = 4;

		// All questions not answerecd, show notification
		if(!this.isAllAnswered()) {
		  this.setState({ message: 'Please answer all the questions' });
			this.toggleNotification ();
		}

		// All questions answered correctly, send to cert screen
		else if (this.isAllCorrect())  {
      this.goToCertificateScreen();
		}

		// User got some wrong, if max attempt, redirect to first lesson, else notify
		else {
      if( this.props.numAttempts === maxAttempts ) {
        this.props.resetQuiz();
				hashHistory.push(`/lesson/${this.props.lessons[0].slug}`);
			} else {
        this.props.incrementNumAttempts();
			  this.setState({
					message: 'Some of your answers are incorrect, please try again' ,
				});
				this.toggleNotification ();
			}
		}
  },


  /*
   * Render the component
   *
   * @todo: Activate submit button if num answers is the same as num questions
   * @todo: Ensures all questions have been answered
   */

  render() {
    const props = this.props;

    return (
      <div>
        <form id='formQuiz' onSubmit={ this.handleSubmit }>
          <div className='quiz-agrmt'>Certificate Agreement <span className='quiz-required'>*</span></div>
          <label htmlFor='certify'>
            <input id='certify' type={'checkbox'} name='certify'/>
            I certify that I have taken all the lessons related to this quiz before obtaining the certificate.
          </label>
          <QuestionList questions={ this.props.questions }/>
          <input type="submit" value="Check Answers" />
        </form>
        <Notification
          isActive={ this.state.isNotificationActive }
          message={ this.state.message }
          action='Dismiss'
          onDismiss={ this.toggleNotification }
          dismissAfter = { 3500 }
          onClick={() =>  this.setState({ isNotificationActive: false })}
        />
      </div>
    );
  }
});


export default QuizForm;

